# docker-compose.yml (Pour développement LOCAL)
# version: '3.8' # Optionnel mais bonne pratique

services:
  api:
    # --- Construire l'image localement ---
    build:
      context: .
      dockerfile: Dockerfile # Spécifie le Dockerfile à utiliser
    # image: ghcr.io/... # Ligne 'image:' supprimée/commentée
    # ------------------------------------
    container_name: nest_api_local # Nom de conteneur simple
    ports:
      - "3000:3000" # Port standard 3000 -> 3000 (sauf si conflit local)
    environment:
      # Variables lues depuis le fichier .env à la racine du projet
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      NODE_ENV: ${NODE_ENV:-development} # Environnement Node.js (dev par défaut)
      PORT: 3000 # Port interne de l'app NestJS
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - api_network_local # Nom de réseau simple
    # Garde la commande pour les migrations et le démarrage standard
    command: sh -c "npx prisma migrate deploy && node dist/main.js"
    # --- Option pour Hot-Reloading (Développement Actif) ---
    # Si vous voulez que vos changements de code soient pris en compte sans rebuild :
    # 1. Décommentez les lignes 'volumes:' ci-dessous
    # 2. Changez 'command:' pour utiliser 'npm run start:dev' (ou équivalent)
    # volumes:
    #   - .:/app # Monte le code local dans /app
    #   - /app/node_modules # Empêche l'écrasement de node_modules par le mount ci-dessus
    # command: npm run start:dev
    # ----------------------------------------------------

  postgres:
    image: postgres:15-alpine
    container_name: postgres_db_local # Nom simple
    restart: unless-stopped # Redémarre sauf si arrêté manuellement
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432" # Port standard (sauf si conflit local)
    volumes:
      - postgres_data_local:/var/lib/postgresql/data # Volume nommé simple
    networks:
      - api_network_local
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin4:
    container_name: pgadmin4_local # Nom simple
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80" # Port standard (sauf si conflit local)
    volumes:
      - pgadmin_data_local:/var/lib/pgadmin # Volume nommé simple
    depends_on:
      - postgres
    networks:
      - api_network_local

networks:
  api_network_local: # Définition simple
    driver: bridge

volumes:
  postgres_data_local: # Définition simple
  pgadmin_data_local: